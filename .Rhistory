hola
asd
asd
11+1
12
13
82*3.35
68*3.35
320*5
60*3.35
640*0.18
30+30+30+50+30+118
60*3.35
120+90+60+80
85*3.35
285+160
90*3.35
90*3.5
350+1500+500
79+59+90+120
citation()
require(INLA)
install.packages("INLA", repos="https://inla.r-inla-download.org/R/stable")
require(INLA)
dlvcomp2 <- function(N, alpha, rd = c(1, 1)) {
N1.t1 <- N[1] + rd[1] * N[1] * (1 - alpha[1, 1] * N[1] - alpha[1, 2] * N[2])
N2.t1 <- N[2] + rd[2] * N[2] * (1 - alpha[2, 1] * N[1] - alpha[2, 2] * N[2])
c(N1.t1, N2.t1)
}
alphs <- matrix(c(0.01, 0.005, 0.008, 0.01), ncol = 2, byrow = TRUE)
t <- 20
alphs
N <- matrix(NA, nrow = t + 1, ncol = 2)
N[1, ] <- c(10, 10)
for (i in 1:t) N[i + 1, ] <- dlvcomp2(N[i, ], alphs)
matplot(0:t, N, type = "l", col = 1, ylim = c(0, 110))
abline(h = 1/alphs[1, 1], lty = 3)
text(0, 1/alphs[1, 1], "K", adj = c(0, 0))
legend("right", c(expression("Sp.1 " * (alpha[21] == 0.008)),
expression("Sp.2 " * (alpha[12] == 0.005))), lty = 1:2,
bty = "n")
alphs
alphs <- matrix(c(0.1, 0.005, 0.008, 0.01), ncol = 2, byrow = TRUE)
N <- matrix(NA, nrow = t + 1, ncol = 2)
N[1, ] <- c(10, 10)
for (i in 1:t) N[i + 1, ] <- dlvcomp2(N[i, ], alphs)
N
lines(0:t, N[,1], col = "red")
lines(0:t, N[,2], col = "red", lty = 2)
library(deSolve)
install.packages("deSolve")
library(deSolve)
parms <- c(r1 = 1, r2 = 0.1, a11 = 0.2, a21 = 0.1, a22 = 0.02,
a12 = 0.01)
initialN <- c(2, 1)
out <- ode(y = initialN, times = 1:100, func = lvcomp2, parms = parms)
lvcomp2 <- function(t, n, parms) {
with(as.list(parms), {
dn1dt <- r1 * n[1] * (1 - a11 * n[1] - a12 * n[2])
dn2dt <- r2 * n[2] * (1 - a22 * n[2] - a21 * n[1])
list(c(dn1dt, dn2dt))
})
}
library(deSolve)
parms <- c(r1 = 1, r2 = 0.1, a11 = 0.2, a21 = 0.1, a22 = 0.02,
a12 = 0.01)
initialN <- c(2, 1)
out <- ode(y = initialN, times = 1:100, func = lvcomp2, parms = parms)
matplot(out[, 1], out[, -1], type = "l")
out[, -1]
out
out[, 1]
out[, -1]
matplot(x = out[, 1], y = out[, -1], type = "l")
a <- matrix(c(0.01, 0.005, 0.005, 0.01), ncol = 2, byrow = TRUE)
N2iso <- expression(1/a[2, 2] - (a[2, 1]/a[2, 2]) * N1)
N1 <- 0:200
plot(N1, eval(N2iso), type = "l", ylim = c(0, 200), xlim = c(0,
200), ylab = expression("N"[2]))
arrows(x0 = 90, y0 = 150, x1 = 90, y1 = 80, length = 0.1)
arrows(x0 = 75, y0 = 0, x1 = 75, y1 = 50, length = 0.1)
N1Star <- expression((a22 - a12)/(a22 * a11 - a12 * a21))
N2Star <- expression((a11 - a21)/(a22 * a11 - a12 * a21))
a11 <- a22 <- 0.01
a12 <- 0.001; a21 <- 0.001
N1 <- eval(N1Star); N2 <- eval(N2Star)
N1
dN1dt <- expression(r1 * N1 - r1 * a11 * N1^2 - r1 * a12 *
+ N1 * N2)
dN2dt <- expression(r2 * N2 - r2 * a22 * N2^2 - r2 * a21 *
+ N1 * N2)
ddN1dN1 <- D(dN1dt, "N1")
ddN1dN1
ddN1dN2 <- D(dN1dt, "N2")
ddN2dN1 <- D(dN2dt, "N1")
ddN2dN2 <- D(dN2dt, "N2")
J <- expression(matrix(c(eval(ddN1dN1), eval(ddN1dN2), eval(ddN2dN1),
eval(ddN2dN2)), nrow = 2, byrow = TRUE))
J
r1 <- r2 <- 1
J1 <- eval(J)
J1
eigStable <- eigen(J1)
eigStable[["values"]]
a11 <- a22 <- 0.01
a12 <- a21 <- 0.011
N1 <- eval(N1Star); N2 <- eval(N2Star)
eigen(eval(J))$values
a11 <- a22 <- 0.01
a12 <- a21 <- 0.011
N1 <- eval(N1Star); N2 <- eval(N2Star)
eigen(eval(J))$values
a11 <- a21 <- 0.01
a22 <- a12 <- 0.015
N1 <- N2 <- 1/(a11 + a22)
eigen(eval(J))[["values"]]
N1 <- 1/(a11)
N2 <- 0
eigen(eval(J))[["values"]]
xa = c(1,2,3,4,5)
xb = c(10,11,12,13,14)
xa[1:3]*xb[1:3]
xa[1:3]*xb[1:3]/3
sum(xa[1:3]*xb[1:3])/3
sum(xa[1:3]*xb[1:3])/6
sum(xa[4:5]*xb[4:5])/9
(11.3333+13.55556)/2
sum(xa[1:5]*xb[1:5])/15
5/3 + 25/7
5.238/2
1+4+9+16
30/10
515/160
160/515
11.1+20.19+36.88
1030-160
ks.test(1,1)
ks.test(1,1, alternative = "greater")
1.716+1.96*1.065
0.27+1.96*1.065
0.389+1.96*0.092
0.389-1.96*0.092
4.644+1.96*0.158
4.644-1.96*0.158
x1 = c(1,2,3)
x2 = c(4,5,6)
x3 = c(7,8,9)
mean(x1,x2,x3)
sum(1:9)
sum(1:9)/9
mean(x1)
mean(x2)
mean(x3)
67*2
134*3.3
450.84/134
158*3.3
47*3.3
29.5+17.74+16.09+59+450.84+489+49.9+37.6+19.21+80+57+60+8+66+19.3+159
29.5+17.74+16.09+59+450.84+489+49.9+37.6+19.21+80+57+60+8+66+19.3+159+5
require(TropFishR)
output <- ELEFAN(x = synLFQ4, Linf_fix = 80,
K_range = seq(0.3,0.7,0.1),C = 0.75, ts = 0.5, MA = 11)
plot(output)
require(NbClust)
11500+3500
15000-1000
15000-1000-900
15000-1000-900-1000
exp(0.6)
exp(0.6*1)
exp(0.6*0)
exp(-0.6*0)
exp(-0.6*1)
exp(-0.2*1)
exp(0.2*1)
require(devtools)
install.packages("devtools")
devtools::install_github("ss3sim/ss3sim", build_vignettes = TRUE)
devtools::install_github("ss3sim/ss3sim", build_vignettes = TRUE)
devtools::install_github("ss3sim/ss3sim")
install.packages("ss3sim")
library(ss3sim)
library(ss3sim)
devtools::install_github("ss3sim/ss3sim", build_vignettes = TRUE)
remove.packages("tibble")
remove.packages("dplyr")
install.packages("dplyr")
devtools::install_github("ss3sim/ss3sim", build_vignettes = TRUE)
devtools::install_github("ss3sim/ss3sim")
install_github("PabloMBooster/fenix")
require(devtools)
install_github("PabloMBooster/fenix")
install_github("PabloMBooster/fenix")
devtools::install_github("ss3sim/ss3sim", build_vignettes = TRUE)
require(devtools)
devtools::install_github("ss3sim/ss3sim", build_vignettes = TRUE)
library(ss3sim)
devtools::install_github("ss3sim/ss3sim")
install.packages("httr")
library(httr)
with_config(use_proxy(...), install_github(...))
with_config(use_proxy(...), install_github(...))
set_config(use_proxy(url = "******_", port = "_*"))
require(devtools)
install_github("ss3sim/ss3sim", build_vignettes = TRUE)
traceback()
options(download.file.method = "wininet")
library(devtools)
install_github("ss3sim/ss3sim", build_vignettes = TRUE)
options(download.file.method = "wininet")
require(devtools)
install_github("ss3sim/ss3sim", build_vignettes = TRUE)
install.packages("ss3sim")
library(ss3sim)
?ss3sim
library(ss3sim)
library(ss3sim)
vignette("ss3-sim-vignette")
vignette("ss3sim-vignette")
vignette("ss3sim-vignette")
?ss3sim
library(ss3sim)
install_github("ss3sim/ss3sim", build_vignettes = TRUE)
library(ss3sim)
vignette("introduction", "ss3sim")
help(package = "ss3sim")
exp(-0.57)
exp(0.65)
exp(-0.07)
exp(-0.5)
exp(0.67)
exp(-0.67)
exp(0.685)
exp(-0.59)
seq(2, 20, 0.5)
c(0,0,0,1,2,3,2,1,0,0,1,2,3,4,5,4,3,2,1,0,0,0,0)
length(c(0,0,0,1,2,3,2,1,0,0,1,2,3,4,5,4,3,2,1,0,0,0,0))
length(seq(2, 20, 0.5))
c(0,0,0,0,0,0,0,0,1,2,3,2,1,0,0,1,2,3,4,5,4,3,2,1,0,0,0,0)
c(0,0,0,0,0,0,0,0,1,2,3,2,1,0,0,1,2,3,4,5,4,3,2,1,0,0,0,0,0,0,0,0)
length(c(0,0,0,0,0,0,0,0,1,2,3,2,1,0,0,1,2,3,4,5,4,3,2,1,0,0,0,0,0,0,0,0))
c(0,0,0,0,0,0,0,0,1,2,3,2,1,0,0,1,2,3,4,5,6,5,4,3,2,1,0,0,0,0,0,0,0,0)
length(c(0,0,0,0,0,0,0,0,1,2,3,2,1,0,0,1,2,3,4,5,6,5,4,3,2,1,0,0,0,0,0,0,0,0))
plot(x = seq(2, 20, 0.5),
y = c(0,0,0,0,0,0,0,0,1,2,3,2,1,0,0,1,2,3,4,5,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0))
require(tidyverse)
require(dplyr)
require(broom)
library(stringr)
387*60+1300
1600+40*14+200+300+300
50*365
40*365
40*30
38000*0.77
complex(1)
complex(real = 0, imaginary = 1)
exp(complex(real = 0, imaginary = 1))
exp(complex(real = 0, imaginary = 1))^pi
require(TropFishR)
?TropFishR
require(r4ss)
tmp2 = SS_output(dir = "models/mod_B")
setwd("~/GitHub/StockAssessmentAnchovyPeruChile")
tmp2 = SS_output(dir = "models/mod_B")
SSplotCatch(replist = tmp2, subplots = 3)
SSplotCatch(replist = tmp2, subplots = 2)
SSplotCatch(replist = tmp2, subplots = 1)
SSplotCatch(replist = tmp2)
